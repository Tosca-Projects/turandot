#!/bin/bash
set -e

if [ "$EUID" -ne 0 ]; then
	echo "Run this script as root"
	exit 1
fi

HERE=$(dirname "$(readlink --canonicalize "$BASH_SOURCE")")
. "$HERE/_env"

KUBERNETES_VERSION=v1.18.2
MINIKUBE_VERSION=v1.9.2
KUBEVIRT_VERSION=v0.29.0

OVERWRITE=false

for ARG in "$@"; do
	case "$ARG" in
		-f)
			OVERWRITE=true
			;;
		-l)
			m "checking for latest versions..."
			KUBERNETES_VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
			MINIKUBE_VERSION=$(curl --silent https://api.github.com/repos/kubernetes/minikube/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
			KUBEVIRT_VERSION=$(curl --silent https://api.github.com/repos/kubevirt/kubevirt/releases | grep tag_name | grep -v -- - | sort -V | tail -1 | awk -F':' '{print $2}' | sed 's/,//' | xargs)
			;;
	esac
done

m "KUBERNETES_VERSION=$KUBERNETES_VERSION"
m "MINIKUBE_VERSION=$MINIKUBE_VERSION"
m "KUBEVIRT_VERSION=$KUBEVIRT_VERSION"

function fetch () {
	local NAME=$1
	local VERSION=$2
	local URL=$3
	local EXEC=/usr/bin/$NAME
	if [ -f "$EXEC" ]; then
		if [ "$OVERWRITE" == true ]; then
			m "overriding existing \"$EXEC\"..."
		else
			m "\"$EXEC\" already exists (use -f to overwrite)"
			return 0
		fi
	fi
	m "downloading $NAME $VERSION..."
	wget --quiet --output-document="$EXEC" "$URL"
	chmod a+x "$EXEC"
	m "installed \"$EXEC\""
}

fetch kubectl "$KUBERNETES_VERSION" \
"https://storage.googleapis.com/kubernetes-release/release/$KUBERNETES_VERSION/bin/linux/amd64/kubectl"

fetch minikube "$MINIKUBE_VERSION" \
"https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64"

fetch virtctl "$KUBEVIRT_VERSION" \
"https://github.com/kubevirt/kubevirt/releases/download/$KUBEVIRT_VERSION/virtctl-${KUBEVIRT_VERSION}-linux-amd64"
